package se.cfor.truckdriver;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.nio.ShortBuffer;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import android.opengl.GLES10;
import android.opengl.GLUtils;
import android.opengl.GLES20;
import android.opengl.GLSurfaceView;
import android.opengl.Matrix;
import android.util.Log;
import android.content.*;
import android.graphics.*;

public class ThaGLRenderer implements GLSurfaceView.Renderer {
	static final int FPS = 30;
	static final int SECOND_TO_NANOSECOND = 1000000000;
	static float screenWidth = 1;
	static float screenHeight = 1;
	private float screenAspectRatio;
	public Context context;
	
	/**
	 * The vertex that is currently dragged around with the mouse
	 */
	public Vertex dragVertex = null;
	private Vertex endVertex = null;
	
	private Vertex trailerStartVertex = null;
	private Vertex trailerEndVertex = null;
	
	/**
	 * The main physics world
	 */
	private Physics world = null;
	public double direction;
	public double turn;
	public double speed;
	public double wheelAngle;
	public double getWheelAngle() {
		return wheelAngle;
	}
	public void setWheelAngle(double wheelAngle) {
		this.wheelAngle = wheelAngle;
	}
	public double accel;
	public double getAccel() {
		return accel;
	}
	public void setAccel(double accel) {
		this.accel = accel;
	}
	private double lx;
	private double ly;
	private double len;
	private float oldx;
	private float oldy;
	private float truck_x;
	private float truck_y;
	private float trailer_x;
	private float trailer_y;
	private float truck_angle;
	private float trailer_angle;
	private float trailer_len;
	private float truck_len;
	
	public float mAngle;
	private int muMVPMatrixHandle;
	private int muMVMatrixHandle;
    private float[] mTMatrix = new float[16];
    private float[] mMVPTRSMatrix = new float[16];
    private float[] mRMatrix = new float[16];
    private float[] mTempMatrix1 = new float[16];
    private float[] mTempMatrix2 = new float[16];
    private float[] mVMatrix = new float[16];
    private float[] mProjMatrix = new float[16];    
    private float[] mSMatrix = new float[16];
    private int mProgram;
    private int maPositionHandle;
    private int maNormalHandle;
    private int bgTextureId;
    private int truckTextureId;
	private FloatBuffer truckVertexBuffer;
	private FloatBuffer truckTextureBuffer;
	private FloatBuffer bgVertexBuffer;
	private FloatBuffer bgTextureBuffer;
    private final String vertexShaderCode = 
        "uniform mat4 uMVPMatrix;\n" +
        "uniform mat4 uMVMatrix;\n" +
        "attribute vec4 a_position;\n" +
        "attribute vec2 a_texture;\n" + 
        "attribute vec3 a_normal;\n" + 
        "varying vec2 v_texture;\n" +
        "varying vec3 v_position;\n" +
        "varying vec3 v_normal;\n" +
        "void main() {\n" +
        "	v_texture = a_texture;\n" +
        	// the matrix must be included as a modifier of gl_Position
        " 	v_normal = normalize(vec3(uMVMatrix * vec4(a_normal, 0.0))); \n" +
        "	v_position = vec3(uMVMatrix *a_position);\n" +
        " 	gl_Position = uMVPMatrix * a_position; \n" +
        "}\n";  

    

    
    private final String fragmentShaderCode = 
        "precision mediump float;\n" +
        "precision lowp int;\n" +
        "uniform sampler2D u_maps[7];\n" +
        "uniform int texInd;\n" +
        "varying vec3 v_position;\n" +
        "varying vec3 v_normal;\n" +
        "varying vec2 v_texture;\n" +
        "vec4 color;\n" +
        "vec3 light_vec;\n" +
        "vec3 half_vec;\n" +
        "void main() \n{\n" +
        "	if (texInd == 0) {\n" +
        "		color = texture2D(u_maps[0], v_texture);\n" +
        "	} else if (texInd == 1) {\n" +
        "		color = texture2D(u_maps[1], v_texture);\n" +
        "	} else if (texInd == 2) {\n" +
        "		color = texture2D(u_maps[2], v_texture);\n" +
        "	} else if (texInd == 3) {\n" +
        "		color = texture2D(u_maps[3], v_texture);\n" +
        "	} else if (texInd == 4) {\n" +
        "		color = texture2D(u_maps[4], v_texture);\n" +
        "	} else if (texInd == 5) {\n" +
        "		color = texture2D(u_maps[5], v_texture);\n" +
        "	} else if (texInd == 6) {\n" +
        "		color = texture2D(u_maps[6], v_texture);\n" +
        "	}\n" +
        "   light_vec = normalize( vec3(4.0,0.0,-20.0) - v_position);\n" +
        "	half_vec = normalize( ((vec3(4.0,0.0,-20.0) + vec3(0.0,0.0,8.0))/2.0)-v_position);\n" +
        "	gl_FragColor = vec4(color.rgb*max(0.3,-1.0*dot(normalize(v_normal),light_vec))+ vec3(1,1,1)*pow(max(0.0,dot(normalize(v_normal),half_vec)),25.0),color.a)  ; " +
        "}";
	private int maTextureHandle;
	private int muMapsHandle;
	private int muTexIndHandle;
	private float truck_width;
	private float trailer_width;
	private int trailerTextureId;
	private int dollyTextureId;
	private float dolly_len;
	private float dolly_angle;
	private float dolly_y;
	private float dolly_x;
	private float dolly_width;
	private int arrowTextureId;
	private int steeringwheelTextureId;
	private double filt = 0.01;
	private ShortBuffer truckIndexBuffer;
	private int testTextureId;
	private float[] mVTRSMatrix = new float[16];;
	private float[] mTRSMatrix = new float[16];;
	private float[] mRSMatrix = new float[16];
	private FloatBuffer wheelVertexBuffer;
	private ShortBuffer wheelIndexBuffer;
	private FloatBuffer dollyVertexBuffer;
	private ShortBuffer dollyIndexBuffer;
	private FloatBuffer trailerVertexBuffer;
	private ShortBuffer trailerIndexBuffer;
	private ShortBuffer bgIndexBuffer;;
	private static String TAG = "TruckDriver";
	
    
    public ThaGLRenderer(Context context)
    {
    	super();
    	this.context = context;
    }
    private int loadShader(int type, String shaderCode){
        
        // create a vertex shader type (GLES20.GL_VERTEX_SHADER)
        // or a fragment shader type (GLES20.GL_FRAGMENT_SHADER)
        int shader = GLES20.glCreateShader(type); 
        
        // add the source code to the shader and compile it
        GLES20.glShaderSource(shader, shaderCode);
        GLES20.glCompileShader(shader);
        
        return shader;
    }
    private void initShapes(){
        
//        float truckCoords[] = {
//                // X, Y, Z
//                -1f, -1f, 0, // bottom Left
//                -1f,  0.0f, 0, // top left
//                 0,  0.0f, 0, // middle top
//
//                -1f, -1f, 0, // bottom Left
//                 0f,  0.0f, 0, // middle top
//                 0f, -1f, 0,  // middle bottom
//
//                 0, -1f, 0, // middle bottom
//                 0,  0.0f, 0, // middle top
//                  1f,  0.0f, 0, // top right
//
//                  0, -1f, 0, // middle bottom
//                  1f,  0.0f, 0, // top right
//                  1f, -1f, 0  // bottom right
//                
//            }; 
//        float truckTexCoords[] = {
//                // u ,v
//                0, 		0, // bottom Left
//                0, 		1, // top left
//                0.5f, 	1, // middle top
//
//                0, 		0, // bottom Left
//                0.5f, 	1, // middle top
//                0.5f, 	0, // middle bottom
//
//                0.5f, 	0, // middle bottom
//                0.5f, 	1, // middle top
//                1f,  	1f,// top right
//
//                0.5f, 	0, // middle bottom
//                1f,  	1f,// top right
//                1f, 	0f,  // bottom right
//            }; 
        float backgroundCoords[] = {
                // X, Y, Z
                -1f, -1f, 0, // bottom Left
                -1f,  1f, 0, // top left
                 1f,  1f, 0, // top right

                -1f, -1f, 0, // bottom Left
                 1f,  1f, 0, // top right
                 1f, -1f, 0  // bottom right
                
        }; 
        float backgroundTexCoords[] = {
                // u,v
                0f, 0f, // bottom Left
                0f, 1f, // top left
                1f, 1f, // top right

                0f, 0f, // bottom Left
                1f, 1f, // top right
                1f, 0f  // bottom right
                
        }; 

        float bgVerticies[]  = {
        		/* PLANE: 4 vertices */
        		10.000000f, 10.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.974256f, 0.972750f,
        		-10.000000f, 10.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.036756f, 0.972750f,
        		-10.000000f, -10.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.036756f, 0.035250f,
        		10.000000f, -10.000000f, 0.000000f, -0.000000f, 0.000000f, 1.000000f, 0.974256f, 0.035250f,
        	};
        
        short bgIndexes[] = {
        		/* PLANE 2 faces */
        		0, 1, 2, 3, 0, 2, 
        		};
        
        float trailerVertices[] = {
        		/* CUBE: 24 vertices */
        		1.000000f, 8.000000f, -1.000000f, 0.000000f, 0.000000f, -1.000000f, 0.271635f, 0.010949f,
        		1.000000f, 0.000000f, -1.000000f, 0.000000f, 0.000000f, -1.000000f, 0.274027f, 0.790828f,
        		-1.000000f, 0.000000f, -1.000000f, 0.000000f, 0.000000f, -1.000000f, 0.079058f, 0.791426f,
        		1.000000f, 8.000000f, 1.000000f, -0.000000f, 0.000000f, 1.000000f, 0.671145f, 0.010949f,
        		-1.000000f, 8.000000f, 1.000000f, -0.000000f, 0.000000f, 1.000000f, 0.866115f, 0.011547f,
        		-1.000000f, 0.000000f, 1.000000f, -0.000000f, 0.000000f, 1.000000f, 0.863722f, 0.791426f,
        		1.000000f, 8.000000f, -1.000000f, 1.000000f, 0.000000f, -0.000000f, 0.668752f, 0.790828f,
        		1.000000f, 8.000000f, 1.000000f, 1.000000f, 0.000000f, -0.000000f, 0.473782f, 0.791426f,
        		1.000000f, 0.000000f, -1.000000f, 1.000000f, 0.000000f, -0.000000f, 0.666360f, 0.010949f,
        		1.000000f, 0.000000f, -1.000000f, -0.000000f, -1.000000f, -0.000000f, 0.473782f, 0.986995f,
        		0.999999f, -0.000001f, 1.000000f, -0.000000f, -1.000000f, -0.000000f, 0.473184f, 0.792025f,
        		-1.000000f, 0.000000f, -1.000000f, -0.000000f, -1.000000f, -0.000000f, 0.668752f, 0.986396f,
        		-1.000000f, 0.000000f, -1.000000f, -1.000000f, 0.000000f, -0.000000f, 0.471390f, 0.790828f,
        		-1.000000f, 0.000000f, 1.000000f, -1.000000f, 0.000000f, -0.000000f, 0.276420f, 0.791427f,
        		-1.000000f, 8.000000f, -1.000000f, -1.000000f, 0.000000f, -0.000000f, 0.468997f, 0.010949f,
        		1.000000f, 8.000000f, 1.000000f, -0.000000f, 1.000000f, 0.000000f, 0.863722f, 0.791426f,
        		1.000000f, 8.000000f, -1.000000f, -0.000000f, 1.000000f, 0.000000f, 0.864320f, 0.986396f,
        		-1.000000f, 8.000000f, -1.000000f, -0.000000f, 1.000000f, 0.000000f, 0.669350f, 0.986995f,
        		-1.000000f, 8.000000f, -1.000000f, 0.000000f, 0.000000f, -1.000000f, 0.076665f, 0.011547f,
        		0.999999f, -0.000001f, 1.000000f, -0.000000f, 0.000000f, 1.000000f, 0.668752f, 0.790828f,
        		0.999999f, -0.000001f, 1.000000f, 1.000000f, -0.000000f, 0.000000f, 0.471390f, 0.011547f,
        		-1.000000f, 0.000000f, 1.000000f, -0.000000f, -1.000000f, 0.000000f, 0.668154f, 0.791426f,
        		-1.000000f, 8.000000f, 1.000000f, -1.000000f, 0.000000f, -0.000000f, 0.274027f, 0.011547f,
        		-1.000000f, 8.000000f, 1.000000f, 0.000000f, 1.000000f, 0.000000f, 0.668752f, 0.792025f,
        	};
        
        short trailerIndexes[]={
        		/* CUBE 12 faces */
        		0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 2, 19, 3, 5, 7, 20, 8, 10, 21, 11, 13, 22, 14, 23, 15, 17, 
        		};
        
        float dollyVertices[] = {
        		/* CUBE: 44 vertices */
        		-0.651573f, 0.653659f, 0.087897f, 0.000000f, 0.000000f, 1.000000f, 0.000887f, 0.000000f,
        		-0.125243f, -0.820010f, 0.087897f, 0.000000f, 0.000000f, 1.000000f, 0.438806f, 0.402025f,
        		-0.072314f, -0.598796f, 0.087897f, 0.000000f, 0.000000f, 1.000000f, 0.353766f, 0.387632f,
        		-0.499782f, 0.498625f, 0.087897f, 0.000000f, 0.000000f, 1.000000f, 0.032850f, 0.075878f,
        		-0.115871f, -0.810639f, -0.087896f, -0.000000f, -0.000000f, -1.000000f, 0.905132f, 0.000000f,
        		-0.651572f, 0.653659f, -0.087896f, -0.000000f, -0.000000f, -1.000000f, 0.656269f, 0.537520f,
        		-0.497586f, 0.503001f, -0.087896f, -0.000000f, -0.000000f, -1.000000f, 0.655286f, 0.455686f,
        		-0.077197f, -0.610055f, -0.087896f, -0.000000f, -0.000000f, -1.000000f, 0.840908f, 0.043563f,
        		0.570536f, 0.014897f, -0.087896f, -0.000000f, 0.000000f, -1.000000f, 0.499026f, 0.037813f,
        		0.752115f, 0.057347f, -0.087896f, -0.000000f, 0.000000f, -1.000000f, 0.438806f, 0.000505f,
        		-0.115871f, -0.810639f, -0.087896f, 0.707106f, -0.707107f, -0.000001f, 0.506224f, 0.538656f,
        		0.752115f, 0.057347f, -0.087896f, 0.707106f, -0.707107f, -0.000001f, 0.532227f, 1.000000f,
        		0.755665f, 0.060896f, 0.161798f, 0.707106f, -0.707107f, -0.000001f, 0.437500f, 1.000000f,
        		-0.125243f, -0.820010f, 0.087897f, 0.707106f, -0.707107f, -0.000001f, 0.439261f, 0.537520f,
        		-0.115871f, -0.810639f, -0.087896f, -0.939894f, -0.339757f, -0.034110f, 0.600337f, 0.952059f,
        		-0.125243f, -0.820010f, 0.087897f, -0.939894f, -0.339757f, -0.034110f, 0.533576f, 0.950074f,
        		-0.651573f, 0.653659f, 0.087897f, -0.939894f, -0.339757f, -0.034110f, 0.533391f, 0.537520f,
        		-0.651572f, 0.653659f, -0.087896f, -0.939894f, -0.339757f, -0.034110f, 0.600173f, 0.537725f,
        		0.755665f, 0.060896f, 0.161798f, 0.389816f, 0.920828f, -0.010932f, 0.905132f, 0.000000f,
        		0.752115f, 0.057347f, -0.087896f, 0.389816f, 0.920828f, -0.010932f, 1.000000f, 0.001007f,
        		-0.651572f, 0.653659f, -0.087896f, 0.389816f, 0.920828f, -0.010932f, 0.998215f, 0.580379f,
        		-0.651573f, 0.653659f, 0.087897f, 0.389816f, 0.920828f, -0.010932f, 0.931436f, 0.580174f,
        		0.755665f, 0.060896f, 0.161798f, -0.088683f, -0.086828f, 0.992268f, 0.000000f, 0.580434f,
        		-0.651573f, 0.653659f, 0.087897f, -0.088683f, -0.086828f, 0.992268f, 0.000887f, 0.000000f,
        		-0.499782f, 0.498625f, 0.087897f, -0.088683f, -0.086828f, 0.992268f, 0.032850f, 0.075878f,
        		0.755665f, 0.060896f, 0.161798f, -0.225296f, -0.505560f, 0.832857f, 0.000000f, 0.580434f,
        		-0.499782f, 0.498625f, 0.087897f, -0.225296f, -0.505560f, 0.832857f, 0.032850f, 0.075878f,
        		0.556493f, 0.027910f, 0.087897f, -0.225296f, -0.505560f, 0.832857f, 0.042782f, 0.513649f,
        		0.755665f, 0.060896f, 0.161798f, -0.375177f, 0.301646f, 0.876500f, 0.000000f, 0.580434f,
        		0.556493f, 0.027910f, 0.087897f, -0.375177f, 0.301646f, 0.876500f, 0.042782f, 0.513649f,
        		-0.125243f, -0.820010f, 0.087897f, -0.375177f, 0.301646f, 0.876500f, 0.438806f, 0.402025f,
        		0.556493f, 0.027910f, 0.087897f, 0.000000f, 0.000000f, 1.000000f, 0.042782f, 0.513649f,
        		0.570536f, 0.014897f, -0.087896f, -0.698523f, 0.712408f, -0.067380f, 0.667456f, 0.537520f,
        		-0.077197f, -0.610055f, -0.087896f, -0.698523f, 0.712408f, -0.067380f, 0.668319f, 0.879438f,
        		-0.072314f, -0.598796f, 0.087897f, -0.698523f, 0.712408f, -0.067380f, 0.601557f, 0.875324f,
        		0.556493f, 0.027910f, 0.087897f, -0.698523f, 0.712408f, -0.067380f, 0.600337f, 0.538074f,
        		-0.497586f, 0.503001f, -0.087896f, 0.933581f, 0.358087f, -0.014145f, 0.735396f, 0.849449f,
        		-0.499782f, 0.498625f, 0.087897f, 0.933581f, 0.358087f, -0.014145f, 0.668644f, 0.850388f,
        		-0.072314f, -0.598796f, 0.087897f, 0.933581f, 0.358087f, -0.014145f, 0.668319f, 0.538299f,
        		-0.077197f, -0.610055f, -0.087896f, 0.933581f, 0.358087f, -0.014145f, 0.735144f, 0.537520f,
        		0.570536f, 0.014897f, -0.087896f, -0.411376f, -0.911460f, 0.003389f, 0.905132f, 0.983646f,
        		0.556493f, 0.027910f, 0.087897f, -0.411376f, -0.911460f, 0.003389f, 0.838321f, 0.976955f,
        		-0.499782f, 0.498625f, 0.087897f, -0.411376f, -0.911460f, 0.003389f, 0.836980f, 0.537648f,
        		-0.497586f, 0.503001f, -0.087896f, -0.411376f, -0.911460f, 0.003389f, 0.903756f, 0.537520f,
        	};
        
        short dollyIndexes[] = {
        		/* CUBE 24 faces */
        		0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 4, 4, 7, 8, 5, 9, 8, 5, 8, 6, 10, 11, 12, 10, 12, 13, 14, 15, 16, 14, 16, 17, 18, 19, 20, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 2, 1, 32, 33, 34, 32, 34, 35, 36, 37, 38, 36, 38, 39, 40, 41, 42, 40, 42, 43, 
        	};
        
        //
        float wheelVertices[] = {
        		/* CYLINDER: 192 vertices */
        		-0.000000f, 1.000000f, -0.295492f, 0.098017f, 0.995185f, 0.000000f, 0.149173f, 0.732287f,
        		-0.000000f, 1.000000f, 0.295492f, 0.098017f, 0.995185f, 0.000000f, 0.000713f, 0.732743f,
        		0.195090f, 0.980785f, 0.295492f, 0.098017f, 0.995185f, 0.000000f, 0.000564f, 0.684444f,
        		0.195090f, 0.980785f, -0.295492f, 0.098017f, 0.995185f, 0.000000f, 0.149024f, 0.683988f,
        		0.195090f, 0.980785f, -0.295492f, 0.290285f, 0.956940f, 0.000000f, 0.149024f, 0.683988f,
        		0.195090f, 0.980785f, 0.295492f, 0.290285f, 0.956940f, 0.000000f, 0.000564f, 0.684444f,
        		0.382683f, 0.923879f, 0.295492f, 0.290285f, 0.956940f, 0.000000f, 0.000413f, 0.635198f,
        		0.382683f, 0.923879f, -0.295492f, 0.290285f, 0.956940f, 0.000000f, 0.148873f, 0.634743f,
        		0.382683f, 0.923879f, -0.295492f, 0.471397f, 0.881921f, 0.000000f, 0.148873f, 0.634743f,
        		0.382683f, 0.923879f, 0.295492f, 0.471397f, 0.881921f, 0.000000f, 0.000413f, 0.635198f,
        		0.555570f, 0.831469f, 0.295492f, 0.471397f, 0.881921f, 0.000000f, 0.000265f, 0.586899f,
        		0.555570f, 0.831469f, -0.295492f, 0.471397f, 0.881921f, 0.000000f, 0.148725f, 0.586444f,
        		0.555570f, 0.831469f, -0.295492f, 0.634393f, 0.773010f, 0.000000f, 0.148725f, 0.586444f,
        		0.555570f, 0.831469f, 0.295492f, 0.634393f, 0.773010f, 0.000000f, 0.000265f, 0.586899f,
        		0.707107f, 0.707106f, 0.295492f, 0.634393f, 0.773010f, 0.000000f, 0.000126f, 0.541402f,
        		0.707107f, 0.707106f, -0.295492f, 0.634393f, 0.773010f, 0.000000f, 0.148586f, 0.540947f,
        		0.707107f, 0.707106f, -0.295492f, 0.773010f, 0.634393f, 0.000000f, 0.148586f, 0.540947f,
        		0.707107f, 0.707106f, 0.295492f, 0.773010f, 0.634393f, 0.000000f, 0.000126f, 0.541402f,
        		0.831470f, 0.555570f, 0.295492f, 0.773010f, 0.634393f, 0.000000f, 0.000000f, 0.500456f,
        		0.831470f, 0.555570f, -0.295492f, 0.773010f, 0.634393f, 0.000000f, 0.148460f, 0.500001f,
        		0.831470f, 0.555570f, -0.295492f, 0.881921f, 0.471396f, 0.000000f, 0.649652f, 0.888372f,
        		0.831470f, 0.555570f, 0.295492f, 0.881921f, 0.471396f, 0.000000f, 0.501192f, 0.888828f,
        		0.923879f, 0.382683f, 0.295492f, 0.881921f, 0.471396f, 0.000000f, 0.501085f, 0.854006f,
        		0.923879f, 0.382683f, -0.295492f, 0.881921f, 0.471396f, 0.000000f, 0.649545f, 0.853551f,
        		0.923879f, 0.382683f, -0.295492f, 0.956940f, 0.290285f, 0.000000f, 0.649545f, 0.853551f,
        		0.923879f, 0.382683f, 0.295492f, 0.956940f, 0.290285f, 0.000000f, 0.501085f, 0.854006f,
        		0.980785f, 0.195090f, 0.295492f, 0.956940f, 0.290285f, 0.000000f, 0.500960f, 0.813060f,
        		0.980785f, 0.195090f, -0.295492f, 0.956940f, 0.290285f, 0.000000f, 0.649420f, 0.812605f,
        		0.980785f, 0.195090f, -0.295492f, 0.995185f, 0.098017f, 0.000000f, 0.649420f, 0.812605f,
        		0.980785f, 0.195090f, 0.295492f, 0.995185f, 0.098017f, 0.000000f, 0.500960f, 0.813060f,
        		1.000000f, -0.000000f, 0.295492f, 0.995185f, 0.098017f, 0.000000f, 0.500820f, 0.767563f,
        		1.000000f, -0.000000f, -0.295492f, 0.995185f, 0.098017f, 0.000000f, 0.649280f, 0.767108f,
        		1.000000f, -0.000000f, -0.295492f, 0.995185f, -0.098017f, 0.000000f, 0.649280f, 0.767108f,
        		1.000000f, -0.000000f, 0.295492f, 0.995185f, -0.098017f, 0.000000f, 0.500820f, 0.767563f,
        		0.980785f, -0.195091f, 0.295492f, 0.995185f, -0.098017f, 0.000000f, 0.500672f, 0.719264f,
        		0.980785f, -0.195091f, -0.295492f, 0.995185f, -0.098017f, 0.000000f, 0.649132f, 0.718809f,
        		0.980785f, -0.195091f, -0.295492f, 0.956940f, -0.290285f, 0.000000f, 0.649132f, 0.718809f,
        		0.980785f, -0.195091f, 0.295492f, 0.956940f, -0.290285f, 0.000000f, 0.500672f, 0.719264f,
        		0.923880f, -0.382684f, 0.295492f, 0.956940f, -0.290285f, 0.000000f, 0.500521f, 0.670019f,
        		0.923880f, -0.382684f, -0.295492f, 0.956940f, -0.290285f, 0.000000f, 0.648981f, 0.669563f,
        		0.923880f, -0.382684f, -0.295492f, 0.881921f, -0.471397f, 0.000000f, 0.648981f, 0.669563f,
        		0.923880f, -0.382684f, 0.295492f, 0.881921f, -0.471397f, 0.000000f, 0.500521f, 0.670019f,
        		0.831470f, -0.555570f, 0.295492f, 0.881921f, -0.471397f, 0.000000f, 0.500373f, 0.621719f,
        		0.831470f, -0.555570f, -0.295492f, 0.881921f, -0.471397f, 0.000000f, 0.648833f, 0.621264f,
        		0.831470f, -0.555570f, -0.295492f, 0.773010f, -0.634393f, 0.000000f, 0.648833f, 0.621264f,
        		0.831470f, -0.555570f, 0.295492f, 0.773010f, -0.634393f, 0.000000f, 0.500373f, 0.621719f,
        		0.707107f, -0.707107f, 0.295492f, 0.773010f, -0.634393f, 0.000000f, 0.500233f, 0.576223f,
        		0.707107f, -0.707107f, -0.295492f, 0.773010f, -0.634393f, 0.000000f, 0.648693f, 0.575767f,
        		0.707107f, -0.707107f, -0.295492f, 0.634393f, -0.773010f, 0.000000f, 0.648693f, 0.575767f,
        		0.707107f, -0.707107f, 0.295492f, 0.634393f, -0.773010f, 0.000000f, 0.500233f, 0.576223f,
        		0.555570f, -0.831470f, 0.295492f, 0.634393f, -0.773010f, 0.000000f, 0.500108f, 0.535277f,
        		0.555570f, -0.831470f, -0.295492f, 0.634393f, -0.773010f, 0.000000f, 0.648568f, 0.534821f,
        		0.555570f, -0.831470f, -0.295492f, 0.471397f, -0.881921f, 0.000000f, 0.648568f, 0.534821f,
        		0.555570f, -0.831470f, 0.295492f, 0.471397f, -0.881921f, 0.000000f, 0.500108f, 0.535277f,
        		0.382683f, -0.923880f, 0.295492f, 0.471397f, -0.881921f, 0.000000f, 0.500001f, 0.500455f,
        		0.382683f, -0.923880f, -0.295492f, 0.471397f, -0.881921f, 0.000000f, 0.648461f, 0.499999f,
        		0.382683f, -0.923880f, -0.295492f, 0.290284f, -0.956940f, 0.000000f, 0.799197f, 0.853551f,
        		0.382683f, -0.923880f, 0.295492f, 0.290284f, -0.956940f, 0.000000f, 0.650737f, 0.854006f,
        		0.195090f, -0.980786f, 0.295492f, 0.290284f, -0.956940f, 0.000000f, 0.650611f, 0.813060f,
        		0.195090f, -0.980786f, -0.295492f, 0.290284f, -0.956940f, 0.000000f, 0.799071f, 0.812605f,
        		0.195090f, -0.980786f, -0.295492f, 0.098017f, -0.995185f, 0.000000f, 0.799071f, 0.812605f,
        		0.195090f, -0.980786f, 0.295492f, 0.098017f, -0.995185f, 0.000000f, 0.650611f, 0.813060f,
        		-0.000000f, -1.000000f, 0.295492f, 0.098017f, -0.995185f, 0.000000f, 0.650472f, 0.767563f,
        		-0.000000f, -1.000000f, -0.295492f, 0.098017f, -0.995185f, 0.000000f, 0.798932f, 0.767108f,
        		-0.000000f, -1.000000f, -0.295492f, -0.098018f, -0.995185f, 0.000000f, 0.798932f, 0.767108f,
        		-0.000000f, -1.000000f, 0.295492f, -0.098018f, -0.995185f, 0.000000f, 0.650472f, 0.767563f,
        		-0.195091f, -0.980785f, 0.295492f, -0.098018f, -0.995185f, 0.000000f, 0.650323f, 0.719264f,
        		-0.195091f, -0.980785f, -0.295492f, -0.098018f, -0.995185f, 0.000000f, 0.798783f, 0.718809f,
        		-0.195091f, -0.980785f, -0.295492f, -0.290285f, -0.956940f, 0.000000f, 0.798783f, 0.718809f,
        		-0.195091f, -0.980785f, 0.295492f, -0.290285f, -0.956940f, 0.000000f, 0.650323f, 0.719264f,
        		-0.382684f, -0.923880f, 0.295492f, -0.290285f, -0.956940f, 0.000000f, 0.650172f, 0.670019f,
        		-0.382684f, -0.923880f, -0.295492f, -0.290285f, -0.956940f, 0.000000f, 0.798632f, 0.669563f,
        		-0.382684f, -0.923880f, -0.295492f, -0.471397f, -0.881921f, 0.000000f, 0.798632f, 0.669563f,
        		-0.382684f, -0.923880f, 0.295492f, -0.471397f, -0.881921f, 0.000000f, 0.650172f, 0.670019f,
        		-0.555571f, -0.831470f, 0.295492f, -0.471397f, -0.881921f, 0.000000f, 0.650024f, 0.621719f,
        		-0.555571f, -0.831470f, -0.295492f, -0.471397f, -0.881921f, 0.000000f, 0.798484f, 0.621264f,
        		-0.555571f, -0.831470f, -0.295492f, -0.634394f, -0.773010f, 0.000000f, 0.798484f, 0.621264f,
        		-0.555571f, -0.831470f, 0.295492f, -0.634394f, -0.773010f, 0.000000f, 0.650024f, 0.621719f,
        		-0.707107f, -0.707107f, 0.295492f, -0.634394f, -0.773010f, 0.000000f, 0.649885f, 0.576223f,
        		-0.707107f, -0.707107f, -0.295492f, -0.634394f, -0.773010f, 0.000000f, 0.798345f, 0.575767f,
        		-0.707107f, -0.707107f, -0.295492f, -0.773011f, -0.634393f, 0.000000f, 0.798345f, 0.575767f,
        		-0.707107f, -0.707107f, 0.295492f, -0.773011f, -0.634393f, 0.000000f, 0.649885f, 0.576223f,
        		-0.831470f, -0.555570f, 0.295492f, -0.773011f, -0.634393f, 0.000000f, 0.649759f, 0.535277f,
        		-0.831470f, -0.555570f, -0.295492f, -0.773011f, -0.634393f, 0.000000f, 0.798219f, 0.534821f,
        		-0.831470f, -0.555570f, -0.295492f, -0.881922f, -0.471396f, 0.000000f, 0.798219f, 0.534821f,
        		-0.831470f, -0.555570f, 0.295492f, -0.881922f, -0.471396f, 0.000000f, 0.649759f, 0.535277f,
        		-0.923880f, -0.382683f, 0.295492f, -0.881922f, -0.471396f, 0.000000f, 0.649652f, 0.500455f,
        		-0.923880f, -0.382683f, -0.295492f, -0.881922f, -0.471396f, 0.000000f, 0.798112f, 0.499999f,
        		-0.923880f, -0.382683f, -0.295492f, -0.956941f, -0.290284f, 0.000000f, 0.500001f, 0.818730f,
        		-0.923880f, -0.382683f, 0.295492f, -0.956941f, -0.290284f, 0.000000f, 0.351541f, 0.819186f,
        		-0.980785f, -0.195090f, 0.295492f, -0.956941f, -0.290284f, 0.000000f, 0.351415f, 0.778240f,
        		-0.980785f, -0.195090f, -0.295492f, -0.956941f, -0.290284f, 0.000000f, 0.499875f, 0.777784f,
        		-0.980785f, -0.195090f, -0.295492f, -0.995185f, -0.098016f, 0.000000f, 0.499875f, 0.777784f,
        		-0.980785f, -0.195090f, 0.295492f, -0.995185f, -0.098016f, 0.000000f, 0.351415f, 0.778240f,
        		-1.000000f, 0.000001f, 0.295492f, -0.995185f, -0.098016f, 0.000000f, 0.351276f, 0.732743f,
        		-1.000000f, 0.000001f, -0.295492f, -0.995185f, -0.098016f, 0.000000f, 0.499736f, 0.732287f,
        		-1.000000f, 0.000001f, -0.295492f, -0.995185f, 0.098018f, 0.000000f, 0.499736f, 0.732287f,
        		-1.000000f, 0.000001f, 0.295492f, -0.995185f, 0.098018f, 0.000000f, 0.351276f, 0.732743f,
        		-0.980785f, 0.195091f, 0.295492f, -0.995185f, 0.098018f, 0.000000f, 0.351127f, 0.684444f,
        		-0.980785f, 0.195091f, -0.295492f, -0.995185f, 0.098018f, 0.000000f, 0.499587f, 0.683988f,
        		-0.980785f, 0.195091f, -0.295492f, -0.956940f, 0.290286f, 0.000000f, 0.499587f, 0.683988f,
        		-0.980785f, 0.195091f, 0.295492f, -0.956940f, 0.290286f, 0.000000f, 0.351127f, 0.684444f,
        		-0.923879f, 0.382684f, 0.295492f, -0.956940f, 0.290286f, 0.000000f, 0.350976f, 0.635198f,
        		-0.923879f, 0.382684f, -0.295492f, -0.956940f, 0.290286f, 0.000000f, 0.499436f, 0.634743f,
        		-0.923879f, 0.382684f, -0.295492f, -0.881921f, 0.471398f, 0.000000f, 0.499436f, 0.634743f,
        		-0.923879f, 0.382684f, 0.295492f, -0.881921f, 0.471398f, 0.000000f, 0.350976f, 0.635198f,
        		-0.831469f, 0.555571f, 0.295492f, -0.881921f, 0.471398f, 0.000000f, 0.350828f, 0.586899f,
        		-0.831469f, 0.555571f, -0.295492f, -0.881921f, 0.471398f, 0.000000f, 0.499288f, 0.586444f,
        		-0.831469f, 0.555571f, -0.295492f, -0.773010f, 0.634394f, 0.000000f, 0.499288f, 0.586444f,
        		-0.831469f, 0.555571f, 0.295492f, -0.773010f, 0.634394f, 0.000000f, 0.350828f, 0.586899f,
        		-0.707106f, 0.707107f, 0.295492f, -0.773010f, 0.634394f, 0.000000f, 0.350689f, 0.541402f,
        		-0.707106f, 0.707107f, -0.295492f, -0.773010f, 0.634394f, 0.000000f, 0.499149f, 0.540947f,
        		-0.707106f, 0.707107f, -0.295492f, -0.634392f, 0.773011f, 0.000000f, 0.499149f, 0.540947f,
        		-0.707106f, 0.707107f, 0.295492f, -0.634392f, 0.773011f, 0.000000f, 0.350689f, 0.541402f,
        		-0.555569f, 0.831470f, 0.295492f, -0.634392f, 0.773011f, 0.000000f, 0.350563f, 0.500456f,
        		-0.555569f, 0.831470f, -0.295492f, -0.634392f, 0.773011f, 0.000000f, 0.499023f, 0.500001f,
        		-0.555569f, 0.831470f, -0.295492f, -0.471396f, 0.881922f, 0.000000f, 0.149545f, 0.853552f,
        		-0.555569f, 0.831470f, 0.295492f, -0.471396f, 0.881922f, 0.000000f, 0.001085f, 0.854007f,
        		-0.382682f, 0.923880f, 0.295492f, -0.471396f, 0.881922f, 0.000000f, 0.000978f, 0.819185f,
        		-0.382682f, 0.923880f, -0.295492f, -0.471396f, 0.881922f, 0.000000f, 0.149438f, 0.818730f,
        		0.195090f, 0.980785f, 0.295492f, -0.000000f, 0.000000f, 1.000000f, 0.590635f, 0.055812f,
        		-0.000000f, 1.000000f, 0.295492f, -0.000000f, 0.000000f, 1.000000f, 0.631581f, 0.028453f,
        		-0.195089f, 0.980785f, 0.295492f, -0.000000f, 0.000000f, 1.000000f, 0.677078f, 0.009607f,
        		-0.382682f, 0.923880f, 0.295492f, -0.000000f, 0.000000f, 1.000000f, 0.725377f, 0.000000f,
        		0.382683f, 0.923879f, 0.295492f, 0.000000f, -0.000000f, 1.000000f, 0.555813f, 0.090634f,
        		-0.555569f, 0.831470f, 0.295492f, 0.000000f, -0.000000f, 1.000000f, 0.774623f, 0.000000f,
        		0.555570f, 0.831469f, 0.295492f, 0.000000f, 0.000000f, 1.000000f, 0.528454f, 0.131580f,
        		-0.707106f, 0.707107f, 0.295492f, 0.000000f, -0.000000f, 1.000000f, 0.822922f, 0.009607f,
        		0.707107f, 0.707106f, 0.295492f, 0.000000f, 0.000000f, 1.000000f, 0.509608f, 0.177077f,
        		-0.831469f, 0.555571f, 0.295492f, 0.000000f, -0.000000f, 1.000000f, 0.868419f, 0.028453f,
        		0.831470f, 0.555570f, 0.295492f, 0.000000f, 0.000000f, 1.000000f, 0.500001f, 0.225377f,
        		-0.923879f, 0.382684f, 0.295492f, 0.000000f, -0.000000f, 1.000000f, 0.909366f, 0.055812f,
        		0.923879f, 0.382683f, 0.295492f, 0.000000f, 0.000000f, 1.000000f, 0.500001f, 0.274622f,
        		-0.980785f, 0.195091f, 0.295492f, 0.000000f, -0.000000f, 1.000000f, 0.944188f, 0.090634f,
        		0.980785f, 0.195090f, 0.295492f, 0.000000f, 0.000000f, 1.000000f, 0.509608f, 0.322922f,
        		-1.000000f, 0.000001f, 0.295492f, 0.000000f, -0.000000f, 1.000000f, 0.971547f, 0.131580f,
        		1.000000f, -0.000000f, 0.295492f, 0.000000f, 0.000000f, 1.000000f, 0.528454f, 0.368419f,
        		-0.980785f, -0.195090f, 0.295492f, 0.000000f, 0.000000f, 1.000000f, 0.990393f, 0.177077f,
        		0.980785f, -0.195091f, 0.295492f, 0.000000f, 0.000000f, 1.000000f, 0.555813f, 0.409365f,
        		-0.923880f, -0.382683f, 0.295492f, 0.000000f, 0.000000f, 1.000000f, 1.000000f, 0.225377f,
        		0.923880f, -0.382684f, 0.295492f, 0.000000f, 0.000000f, 1.000000f, 0.590635f, 0.444187f,
        		-0.831470f, -0.555570f, 0.295492f, 0.000000f, 0.000000f, 1.000000f, 1.000000f, 0.274622f,
        		0.831470f, -0.555570f, 0.295492f, 0.000000f, 0.000000f, 1.000000f, 0.631581f, 0.471546f,
        		-0.707107f, -0.707107f, 0.295492f, 0.000000f, 0.000000f, 1.000000f, 0.990393f, 0.322922f,
        		0.707107f, -0.707107f, 0.295492f, 0.000000f, 0.000000f, 1.000000f, 0.677078f, 0.490392f,
        		-0.555571f, -0.831470f, 0.295492f, 0.000000f, 0.000000f, 1.000000f, 0.971547f, 0.368419f,
        		0.555570f, -0.831470f, 0.295492f, 0.000000f, 0.000000f, 1.000000f, 0.725378f, 0.499999f,
        		-0.382684f, -0.923880f, 0.295492f, 0.000000f, 0.000000f, 1.000000f, 0.944188f, 0.409365f,
        		0.382683f, -0.923880f, 0.295492f, 0.000000f, 0.000000f, 1.000000f, 0.774623f, 0.499999f,
        		-0.195091f, -0.980785f, 0.295492f, 0.000000f, 0.000000f, 1.000000f, 0.909366f, 0.444187f,
        		0.195090f, -0.980786f, 0.295492f, 0.000000f, 0.000000f, 1.000000f, 0.822923f, 0.490392f,
        		-0.000000f, -1.000000f, 0.295492f, 0.000000f, 0.000000f, 1.000000f, 0.868420f, 0.471546f,
        		-0.000000f, 1.000000f, 0.295492f, -0.098017f, 0.995185f, 0.000000f, 0.000713f, 0.732743f,
        		-0.000000f, 1.000000f, -0.295492f, -0.098017f, 0.995185f, 0.000000f, 0.149173f, 0.732287f,
        		-0.195089f, 0.980785f, -0.295492f, -0.098017f, 0.995185f, 0.000000f, 0.149312f, 0.777784f,
        		-0.195089f, 0.980785f, 0.295492f, -0.098017f, 0.995185f, 0.000000f, 0.000852f, 0.778239f,
        		-0.382682f, 0.923880f, -0.295492f, -0.290283f, 0.956941f, 0.000000f, 0.149438f, 0.818730f,
        		-0.382682f, 0.923880f, 0.295492f, -0.290283f, 0.956941f, 0.000000f, 0.000978f, 0.819185f,
        		-0.195089f, 0.980785f, 0.295492f, -0.290283f, 0.956941f, 0.000000f, 0.000852f, 0.778239f,
        		-0.195089f, 0.980785f, -0.295492f, -0.290283f, 0.956941f, 0.000000f, 0.149312f, 0.777784f,
        		-0.000000f, 1.000000f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.131588f, 0.471551f,
        		0.195090f, 0.980785f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.090641f, 0.444193f,
        		-0.195089f, 0.980785f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.177085f, 0.490395f,
        		-0.382682f, 0.923880f, -0.295492f, 0.000000f, -0.000000f, -1.000000f, 0.225385f, 0.500001f,
        		0.382683f, 0.923879f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.055818f, 0.409372f,
        		-0.555569f, 0.831470f, -0.295492f, 0.000000f, -0.000000f, -1.000000f, 0.274631f, 0.499999f,
        		0.555570f, 0.831469f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.028457f, 0.368427f,
        		-0.707106f, 0.707107f, -0.295492f, 0.000000f, -0.000000f, -1.000000f, 0.322930f, 0.490390f,
        		0.707107f, 0.707106f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.009610f, 0.322930f,
        		-0.831469f, 0.555571f, -0.295492f, 0.000000f, -0.000000f, -1.000000f, 0.368426f, 0.471544f,
        		0.831470f, 0.555570f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.000002f, 0.274631f,
        		-0.923879f, 0.382684f, -0.295492f, 0.000000f, -0.000000f, -1.000000f, 0.409372f, 0.444183f,
        		0.923879f, 0.382683f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.000000f, 0.225386f,
        		-0.980785f, 0.195091f, -0.295492f, 0.000000f, -0.000000f, -1.000000f, 0.444193f, 0.409360f,
        		0.980785f, 0.195090f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.009606f, 0.177086f,
        		-1.000000f, 0.000001f, -0.295492f, 0.000000f, -0.000000f, -1.000000f, 0.471551f, 0.368413f,
        		1.000000f, -0.000000f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.028450f, 0.131588f,
        		-0.980785f, -0.195090f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.490395f, 0.322915f,
        		0.980785f, -0.195091f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.055808f, 0.090641f,
        		-0.923880f, -0.382683f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.500001f, 0.274616f,
        		0.923880f, -0.382684f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.090629f, 0.055818f,
        		-0.831470f, -0.555570f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.499999f, 0.225370f,
        		0.831470f, -0.555570f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.131574f, 0.028457f,
        		-0.707107f, -0.707107f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.490390f, 0.177071f,
        		0.707107f, -0.707107f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.177071f, 0.009610f,
        		-0.555571f, -0.831470f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.471544f, 0.131574f,
        		0.555570f, -0.831470f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.225370f, 0.000002f,
        		-0.382684f, -0.923880f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.444183f, 0.090629f,
        		0.382683f, -0.923880f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.274615f, 0.000000f,
        		-0.195091f, -0.980785f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.409360f, 0.055808f,
        		0.195090f, -0.980786f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.322915f, 0.009606f,
        		-0.000000f, -1.000000f, -0.295492f, 0.000000f, 0.000000f, -1.000000f, 0.368413f, 0.028450f,
        	};
        
        short wheelIndexes[] = {
        		/* CYLINDER 124 faces */
        		0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23, 24, 25, 26, 24, 26, 27, 28, 29, 30, 28, 30, 31, 32, 33, 34, 32, 34, 35, 36, 37, 38, 36, 38, 39, 40, 41, 42, 40, 42, 43, 44, 45, 46, 44, 46, 47, 48, 49, 50, 48, 50, 51, 52, 53, 54, 52, 54, 55, 56, 57, 58, 56, 58, 59, 60, 61, 62, 60, 62, 63, 64, 65, 66, 64, 66, 67, 68, 69, 70, 68, 70, 71, 72, 73, 74, 72, 74, 75, 76, 77, 78, 76, 78, 79, 80, 81, 82, 80, 82, 83, 84, 85, 86, 84, 86, 87, 88, 89, 90, 88, 90, 91, 92, 93, 94, 92, 94, 95, 96, 97, 98, 96, 98, 99, 100, 101, 102, 100, 102, 103, 104, 105, 106, 104, 106, 107, 108, 109, 110, 108, 110, 111, 112, 113, 114, 112, 114, 115, 116, 117, 118, 116, 118, 119, 120, 121, 122, 120, 122, 123, 120, 123, 124, 123, 125, 124, 125, 126, 124, 125, 127, 126, 127, 128, 126, 127, 129, 128, 129, 130, 128, 129, 131, 130, 131, 132, 130, 131, 133, 132, 133, 134, 132, 133, 135, 134, 135, 136, 134, 135, 137, 136, 137, 138, 136, 137, 139, 138, 139, 140, 138, 139, 141, 140, 141, 142, 140, 141, 143, 142, 143, 144, 142, 143, 145, 144, 145, 146, 144, 145, 147, 146, 147, 148, 146, 147, 149, 148, 149, 150, 148, 149, 151, 150, 152, 153, 154, 152, 154, 155, 156, 157, 158, 156, 158, 159, 160, 161, 162, 161, 163, 162, 161, 164, 163, 164, 165, 163, 164, 166, 165, 166, 167, 165, 166, 168, 167, 168, 169, 167, 168, 170, 169, 170, 171, 169, 170, 172, 171, 172, 173, 171, 172, 174, 173, 174, 175, 173, 174, 176, 175, 176, 177, 175, 176, 178, 177, 178, 179, 177, 178, 180, 179, 180, 181, 179, 180, 182, 181, 182, 183, 181, 182, 184, 183, 184, 185, 183, 184, 186, 185, 186, 187, 185, 186, 188, 187, 188, 189, 187, 188, 190, 189, 190, 191, 189, 
        		};
        
        float vertices[]={
        		/* CUBE_001: 141 vertices */
        		1.000000f, -0.309578f, -0.718820f, 1.000000f, -0.000000f, -0.000000f, 0.950928f, 0.672505f,
        		1.000000f, -0.948801f, -0.560799f, 1.000000f, -0.000000f, -0.000000f, 0.889499f, 0.687491f,
        		1.000000f, -0.503275f, -1.218820f, 1.000000f, -0.000000f, -0.000000f, 0.932475f, 0.624435f,
        		-1.000000f, -0.948801f, -0.560799f, 0.000000f, -0.999579f, -0.029014f, 0.773926f, 0.709775f,
        		-1.000000f, -0.915188f, -1.718820f, 0.000000f, -0.999579f, -0.029014f, 0.774264f, 0.820005f,
        		0.000000f, -0.948801f, -0.560799f, 0.000000f, -0.999579f, -0.029014f, 0.677899f, 0.710069f,
        		0.000000f, -0.309578f, 0.795540f, -0.000000f, 0.000000f, 1.000000f, 0.803744f, 0.096437f,
        		0.000000f, 1.084812f, 0.795540f, -0.000000f, 0.000000f, 1.000000f, 0.937643f, 0.096027f,
        		-1.000000f, 1.084812f, 0.795540f, -0.000000f, 0.000000f, 1.000000f, 0.937937f, 0.192053f,
        		-1.000000f, -0.309578f, -0.718820f, -1.000000f, 0.000000f, 0.000000f, 0.938571f, 0.430955f,
        		-1.000000f, -0.915188f, -1.718820f, -1.000000f, 0.000000f, 0.000000f, 0.996431f, 0.334750f,
        		-1.000000f, -0.948801f, -0.560799f, -1.000000f, 0.000000f, 0.000000f, 1.000000f, 0.445941f,
        		-1.000000f, -0.559749f, 0.795540f, -1.000000f, 0.000000f, 0.000000f, 0.919846f, 0.192538f,
        		-1.000000f, -0.309578f, 0.795540f, -1.000000f, 0.000000f, 0.000000f, 0.919772f, 0.216561f,
        		-1.000000f, -0.309578f, -0.718820f, -1.000000f, 0.000000f, 0.000000f, 0.774353f, 0.216115f,
        		-1.000000f, 1.084812f, 0.795540f, -1.000000f, 0.000000f, 0.000000f, 0.919362f, 0.350460f,
        		-1.000000f, 1.084812f, 0.795540f, 0.000000f, 1.000000f, -0.000000f, 0.000567f, 0.769314f,
        		0.000000f, 1.084812f, 0.795540f, 0.000000f, 1.000000f, -0.000000f, 0.000283f, 0.673287f,
        		0.000000f, 1.084812f, -0.718820f, 0.000000f, 1.000000f, -0.000000f, 0.144097f, 0.672846f,
        		1.000000f, 1.084812f, 0.795540f, 0.000000f, 1.000000f, -0.000000f, 0.000000f, 0.577260f,
        		1.000000f, 1.084812f, -0.718820f, 0.000000f, 1.000000f, -0.000000f, 0.143814f, 0.576819f,
        		1.000000f, -0.080434f, -0.929155f, 1.000000f, 0.000000f, -0.000000f, 0.972994f, 0.652375f,
        		1.000000f, -0.316890f, -1.718820f, 1.000000f, 0.000000f, -0.000000f, 0.950520f, 0.576477f,
        		1.000000f, 1.084812f, 0.795540f, 1.000000f, 0.000000f, -0.000000f, 0.774427f, 0.576300f,
        		1.000000f, -0.309578f, 0.795540f, 1.000000f, 0.000000f, -0.000000f, 0.774016f, 0.442402f,
        		1.000000f, 1.084812f, -0.718820f, 1.000000f, 0.000000f, -0.000000f, 0.919846f, 0.575854f,
        		1.000000f, -0.559749f, 0.795540f, 1.000000f, 0.000000f, -0.000000f, 0.773943f, 0.418378f,
        		1.000000f, -0.309578f, -0.718820f, 1.000000f, 0.000000f, -0.000000f, 0.919435f, 0.441955f,
        		1.000000f, -0.948801f, -0.560799f, 0.000000f, -0.999579f, -0.029014f, 0.581873f, 0.710364f,
        		1.000000f, -0.915188f, -1.718820f, 0.000000f, -0.999579f, -0.029014f, 0.582211f, 0.820594f,
        		1.000000f, -0.559749f, 0.795540f, 0.057743f, -0.959634f, 0.275261f, 0.581463f, 0.576890f,
        		0.000000f, -0.619921f, 0.795540f, 0.057743f, -0.959634f, 0.275261f, 0.677492f, 0.577208f,
        		1.000000f, -0.948801f, -0.560799f, 0.057743f, -0.959634f, 0.275261f, 0.581873f, 0.710364f,
        		0.000000f, -0.619921f, 0.795540f, -0.057743f, -0.959634f, 0.275261f, 0.677492f, 0.577208f,
        		-1.000000f, -0.559749f, 0.795540f, -0.057743f, -0.959634f, 0.275261f, 0.773517f, 0.576300f,
        		-1.000000f, -0.948801f, -0.560799f, -0.057743f, -0.959634f, 0.275261f, 0.773926f, 0.709775f,
        		0.000000f, -1.000000f, -1.718820f, 0.000000f, -0.000000f, -1.000000f, 0.026476f, 0.864300f,
        		0.000000f, -0.588087f, -1.718820f, 0.000000f, -0.000000f, -1.000000f, 0.065887f, 0.867665f,
        		0.500000f, -0.545681f, -1.718820f, 0.000000f, -0.000000f, -1.000000f, 0.065860f, 0.915851f,
        		-1.000000f, -0.915188f, -1.718820f, -0.000000f, -0.000000f, -1.000000f, 0.042759f, 0.769314f,
        		-1.000000f, -0.503275f, -1.718820f, -0.000000f, -0.000000f, -1.000000f, 0.082170f, 0.772678f,
        		0.000000f, -0.948801f, -0.560799f, -0.084427f, -0.995457f, 0.044012f, 0.677899f, 0.710069f,
        		-1.000000f, -0.915188f, -1.718820f, -0.084427f, -0.995457f, 0.044012f, 0.774264f, 0.820005f,
        		0.000000f, -1.000000f, -1.718820f, -0.084427f, -0.995457f, 0.044012f, 0.678240f, 0.821164f,
        		0.000000f, -0.619921f, 0.795540f, -0.000000f, 0.000000f, 1.000000f, 0.773943f, 0.096529f,
        		-1.000000f, -0.559749f, 0.795540f, -0.000000f, 0.000000f, 1.000000f, 0.780015f, 0.192538f,
        		1.000000f, -0.559749f, 0.795540f, -0.000000f, 0.000000f, 1.000000f, 0.779426f, 0.000484f,
        		1.000000f, -0.309578f, 0.795540f, -0.000000f, 0.000000f, 1.000000f, 0.803449f, 0.000411f,
        		1.000000f, 1.084812f, 0.795540f, -0.000000f, 0.000000f, 1.000000f, 0.937348f, 0.000000f,
        		-1.000000f, -0.503275f, -1.218820f, -1.000000f, -0.000000f, 0.000000f, 0.957024f, 0.382885f,
        		-1.000000f, -0.115198f, -0.919525f, -1.000000f, -0.000000f, 0.000000f, 0.919846f, 0.411739f,
        		-1.000000f, -0.315662f, -1.718820f, -1.000000f, -0.000000f, 0.000000f, 0.938861f, 0.334926f,
        		-1.000000f, -0.309578f, -0.718820f, -1.000000f, 0.000000f, 0.000000f, 0.173238f, 0.846051f,
        		-1.000000f, 0.584812f, -0.718820f, -1.000000f, 0.000000f, 0.000000f, 0.172975f, 0.760166f,
        		-1.000000f, -0.115198f, -0.919525f, -1.000000f, 0.000000f, 0.000000f, 0.192454f, 0.827326f,
        		-1.000000f, 1.084812f, -0.718820f, -1.000000f, 0.000000f, 0.000000f, 0.172827f, 0.712152f,
        		-1.000000f, 1.084812f, -0.937444f, -1.000000f, 0.000000f, 0.000000f, 0.193821f, 0.712088f,
        		-1.000000f, -0.115198f, -0.919525f, 0.407490f, 0.885776f, -0.222153f, 0.083813f, 0.961594f,
        		-0.500000f, -0.545681f, -1.718820f, 0.407490f, 0.885776f, -0.222153f, 0.165703f, 0.913361f,
        		-1.000000f, -0.315662f, -1.718820f, 0.407490f, 0.885776f, -0.222153f, 0.162572f, 0.961367f,
        		1.000000f, -0.080434f, -0.929155f, -0.401473f, 0.877380f, -0.262722f, 0.083666f, 0.769536f,
        		1.000000f, -0.316890f, -1.718820f, -0.401473f, 0.877380f, -0.262722f, 0.162023f, 0.769314f,
        		0.500000f, -0.545681f, -1.718820f, -0.401473f, 0.877380f, -0.262722f, 0.165420f, 0.817335f,
        		1.000000f, -0.915188f, -1.718820f, 1.000000f, 0.000000f, 0.000000f, 0.893068f, 0.576300f,
        		1.000000f, -0.503275f, -1.718820f, 1.000000f, 0.000000f, 0.000000f, 0.932622f, 0.576422f,
        		-1.000000f, 1.084812f, -0.718820f, 0.000000f, 1.000000f, -0.000000f, 0.144380f, 0.768873f,
        		-1.000000f, 1.084812f, -0.937444f, 0.000000f, 1.000000f, -0.000000f, 0.165142f, 0.768809f,
        		1.000000f, 1.084812f, -0.718820f, 0.000000f, 0.998202f, 0.059942f, 0.143814f, 0.576819f,
        		1.000000f, 1.099074f, -0.956318f, 0.000000f, 0.998202f, 0.059942f, 0.166165f, 0.576750f,
        		0.000000f, 1.084812f, -0.718820f, 0.000000f, 0.998202f, 0.059942f, 0.144097f, 0.672846f,
        		1.000000f, 1.084812f, -0.718820f, 1.000000f, 0.000000f, -0.000000f, 0.193821f, 0.578189f,
        		1.000000f, 0.584812f, -0.718820f, 1.000000f, 0.000000f, -0.000000f, 0.193674f, 0.626203f,
        		1.000000f, 1.099074f, -0.956318f, 1.000000f, 0.000000f, -0.000000f, 0.171019f, 0.576750f,
        		1.000000f, -0.309578f, -0.718820f, 1.000000f, 0.000000f, -0.000000f, 0.193410f, 0.712088f,
        		1.000000f, -0.080434f, -0.929155f, 1.000000f, 0.000000f, -0.000000f, 0.173280f, 0.690022f,
        		-1.000000f, -0.115198f, -0.919525f, -0.009329f, -0.014930f, -0.999845f, 0.774264f, 0.576300f,
        		-1.000000f, 1.084812f, -0.937444f, -0.009329f, -0.014930f, -0.999845f, 0.889499f, 0.577278f,
        		1.000000f, 1.099074f, -0.956318f, -0.009329f, -0.014930f, -0.999845f, 0.889248f, 0.769339f,
        		-1.000000f, -0.309578f, 0.795540f, 0.000000f, 0.000000f, 1.000000f, 0.804038f, 0.192464f,
        		-1.000000f, -0.503275f, -1.718820f, -1.000000f, 0.000000f, -0.000000f, 0.956876f, 0.334871f,
        		-1.000000f, -0.559749f, 0.795540f, -1.000000f, -0.000000f, 0.000000f, 0.963040f, 0.576300f,
        		-1.000000f, 1.084812f, -0.718820f, -1.000000f, 0.000000f, 0.000000f, 0.773943f, 0.350014f,
        		-1.000000f, 1.084812f, -0.718820f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
        		-1.000000f, 0.584812f, -0.718820f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
        		-1.000000f, -0.309578f, -0.718820f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
        		1.000000f, -0.309578f, -0.718820f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
        		1.000000f, 0.584812f, -0.718820f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
        		1.000000f, 1.084812f, -0.718820f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
        		1.000000f, -0.559749f, 0.795540f, 1.000000f, 0.000000f, -0.000000f, 0.926459f, 0.817851f,
        		0.000000f, -0.948801f, -0.560799f, 0.084427f, -0.995457f, 0.044012f, 0.677899f, 0.710069f,
        		0.000000f, -1.000000f, -1.718820f, 0.084427f, -0.995457f, 0.044012f, 0.678240f, 0.821164f,
        		1.000000f, -0.915188f, -1.718820f, 0.084427f, -0.995457f, 0.044012f, 0.582211f, 0.820594f,
        		0.000000f, -0.619921f, 0.795540f, 0.000000f, -0.971838f, 0.235648f, 0.677492f, 0.577208f,
        		0.000000f, -0.948801f, -0.560799f, 0.000000f, -0.971838f, 0.235648f, 0.677899f, 0.710069f,
        		1.000000f, -0.948801f, -0.560799f, 0.000000f, -0.971838f, 0.235648f, 0.581873f, 0.710364f,
        		-1.000000f, -0.948801f, -0.560799f, 0.000000f, -0.971838f, 0.235648f, 0.773926f, 0.709775f,
        		1.000000f, -0.503275f, -1.718820f, 0.000000f, 0.000000f, -1.000000f, 0.065833f, 0.964037f,
        		1.000000f, -0.915188f, -1.718820f, 0.000000f, 0.000000f, -1.000000f, 0.026422f, 0.960672f,
        		-1.000000f, -0.503275f, -1.718820f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
        		-0.500000f, -0.545681f, -1.718820f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
        		0.000000f, -0.588087f, -1.718820f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f,
        		-1.000000f, -0.115198f, -0.919525f, -0.017319f, 0.850880f, -0.525075f, 0.083813f, 0.961594f,
        		1.000000f, -0.080434f, -0.929155f, -0.017319f, 0.850880f, -0.525075f, 0.083666f, 0.769536f,
        		0.000000f, -0.588087f, -1.718820f, -0.017319f, 0.850880f, -0.525075f, 0.166165f, 0.865349f,
        		1.000000f, -0.080434f, -0.929155f, -0.004414f, -0.023023f, -0.999725f, 0.775979f, 0.768377f,
        		-1.000000f, -0.115198f, -0.919525f, -0.004414f, -0.023023f, -0.999725f, 0.774264f, 0.576300f,
        		1.000000f, 1.099074f, -0.956318f, -0.004414f, -0.023023f, -0.999725f, 0.889248f, 0.769339f,
        		1.000000f, -0.316890f, -1.718820f, 0.000000f, -0.000000f, -1.000000f, 0.083666f, 0.965559f,
        		-0.500000f, -0.545681f, -1.718820f, 0.076074f, 0.896969f, -0.435499f, 0.165703f, 0.913361f,
        		-1.000000f, -0.115198f, -0.919525f, 0.076074f, 0.896969f, -0.435499f, 0.083813f, 0.961594f,
        		0.000000f, -0.588087f, -1.718820f, 0.076074f, 0.896969f, -0.435499f, 0.166165f, 0.865349f,
        		-1.000000f, -0.315662f, -1.718820f, 0.000000f, 0.000000f, -1.000000f, 0.791891f, 0.350460f,
        		-0.500000f, -0.545681f, -1.718820f, 0.000000f, 0.000000f, -1.000000f, 0.774040f, 0.400205f,
        		-1.000000f, -0.503275f, -1.718820f, 0.000000f, 0.000000f, -1.000000f, 0.773943f, 0.352019f,
        		1.000000f, -0.080434f, -0.929155f, -0.074559f, 0.879116f, -0.470740f, 0.083666f, 0.769536f,
        		0.500000f, -0.545681f, -1.718820f, -0.074559f, 0.879116f, -0.470740f, 0.165420f, 0.817335f,
        		0.000000f, -0.588087f, -1.718820f, -0.074559f, 0.879116f, -0.470740f, 0.166165f, 0.865349f,
        		0.969461f, 7.220043f, -0.993475f, 0.000000f, 0.000000f, -1.000000f, 0.773517f, 0.000000f,
        		0.969461f, 1.220043f, -0.993475f, 0.000000f, 0.000000f, -1.000000f, 0.773943f, 0.576159f,
        		-1.030539f, 1.220043f, -0.993475f, 0.000000f, 0.000000f, -1.000000f, 0.581888f, 0.576300f,
        		0.969462f, 7.220042f, 1.006525f, -0.000000f, 0.000000f, 1.000000f, 0.389410f, 0.000000f,
        		-1.030539f, 7.220043f, 1.006525f, -0.000000f, 0.000000f, 1.000000f, 0.581463f, 0.000589f,
        		-1.030539f, 1.220043f, 1.006525f, -0.000000f, 0.000000f, 1.000000f, 0.579696f, 0.576749f,
        		0.969461f, 7.220043f, -0.993475f, 1.000000f, 0.000000f, -0.000000f, 0.193821f, 0.576160f,
        		0.969462f, 7.220042f, 1.006525f, 1.000000f, 0.000000f, -0.000000f, 0.001768f, 0.576750f,
        		0.969461f, 1.220043f, -0.993475f, 1.000000f, 0.000000f, -0.000000f, 0.192053f, 0.000000f,
        		0.969461f, 1.220043f, -0.993475f, -0.000000f, -1.000000f, -0.000000f, 0.579200f, 0.768803f,
        		0.969461f, 1.220042f, 1.006525f, -0.000000f, -1.000000f, -0.000000f, 0.388231f, 0.769389f,
        		-1.030539f, 1.220043f, -0.993475f, -0.000000f, -1.000000f, -0.000000f, 0.578611f, 0.576749f,
        		-1.030539f, 1.220043f, -0.993475f, -1.000000f, 0.000000f, -0.000000f, 0.387642f, 0.576160f,
        		-1.030539f, 1.220043f, 1.006525f, -1.000000f, 0.000000f, -0.000000f, 0.195589f, 0.576750f,
        		-1.030538f, 7.220043f, -0.993475f, -1.000000f, 0.000000f, -0.000000f, 0.385875f, 0.000000f,
        		0.969462f, 7.220042f, 1.006525f, -0.000000f, 1.000000f, 0.000000f, 0.193821f, 0.577332f,
        		0.969461f, 7.220043f, -0.993475f, -0.000000f, 1.000000f, 0.000000f, 0.383754f, 0.576750f,
        		-1.030538f, 7.220043f, -0.993475f, -0.000000f, 1.000000f, 0.000000f, 0.384321f, 0.768803f,
        		-1.030538f, 7.220043f, -0.993475f, 0.000000f, 0.000000f, -1.000000f, 0.581463f, 0.000141f,
        		0.969461f, 1.220042f, 1.006525f, -0.000000f, 0.000000f, 1.000000f, 0.387642f, 0.576160f,
        		0.969461f, 1.220042f, 1.006525f, 1.000000f, -0.000000f, 0.000000f, 0.000000f, 0.000589f,
        		-1.030539f, 1.220043f, 1.006525f, -0.000000f, -1.000000f, 0.000000f, 0.387642f, 0.577335f,
        		-1.030539f, 7.220043f, 1.006525f, -1.000000f, 0.000000f, -0.000000f, 0.193821f, 0.000589f,
        		-1.030539f, 7.220043f, 1.006525f, 0.000000f, 1.000000f, 0.000000f, 0.194388f, 0.769386f,
        	};

//        float vertices[]={
//        		/* CUBE: 30 vertices */
//        		1.000000f, 0.901931f, -1.000000f, 0.000000f, 0.000000f, -1.000000f, 0.689079f, 0.658135f,
//        		1.000000f, -0.248805f, -1.000000f, 0.000000f, 0.000000f, -1.000000f, 0.877806f, 0.658714f,
//        		-1.000000f, 1.000000f, -1.000000f, 0.000000f, 0.000000f, -1.000000f, 0.671988f, 0.986097f,
//        		1.000000f, 0.999999f, 1.000000f, -0.000000f, -0.000000f, 1.000000f, 0.329018f, 0.345390f,
//        		-1.000000f, 1.000000f, 1.000000f, -0.000000f, -0.000000f, 1.000000f, 0.328011f, 0.673401f,
//        		0.999999f, -1.000001f, 1.000000f, -0.000000f, -0.000000f, 1.000000f, 0.001006f, 0.344384f,
//        		1.000000f, 0.901931f, -1.000000f, 1.000000f, 0.000000f, -0.000000f, 0.654898f, 0.658135f,
//        		1.000000f, 0.999999f, 1.000000f, 1.000000f, 0.000000f, -0.000000f, 0.671988f, 0.986098f,
//        		1.000000f, -0.248805f, -1.000000f, 1.000000f, 0.000000f, -0.000000f, 0.466171f, 0.658714f,
//        		1.000000f, -0.248805f, -1.000000f, 0.331706f, -0.883143f, -0.331707f, 0.000000f, 0.344384f,
//        		0.999999f, -1.000001f, 1.000000f, 0.331706f, -0.883143f, -0.331707f, 0.011869f, 0.000000f,
//        		-1.000000f, -1.000000f, -1.000000f, 0.331706f, -0.883143f, -0.331707f, 0.343977f, 0.323867f,
//        		-1.000000f, -1.000000f, -1.000000f, -1.000000f, 0.000000f, -0.000000f, 0.671988f, 0.329117f,
//        		-1.000000f, -1.000000f, 1.000000f, -1.000000f, 0.000000f, -0.000000f, 0.672995f, 0.657129f,
//        		-1.000000f, 1.000000f, 1.000000f, -1.000000f, 0.000000f, -0.000000f, 0.344983f, 0.658135f,
//        		1.000000f, 0.999999f, 1.000000f, 0.048917f, 0.997604f, -0.048917f, 0.343977f, 0.328308f,
//        		1.000000f, 0.901931f, -1.000000f, 0.048917f, 0.997604f, -0.048917f, 0.344590f, 0.000000f,
//        		-1.000000f, 1.000000f, -1.000000f, 0.048917f, 0.997604f, -0.048917f, 0.672897f, 0.001204f,
//        		-1.000000f, -1.000000f, 1.000000f, 0.000000f, -0.000000f, 1.000000f, 0.000000f, 0.672395f,
//        		1.000000f, 0.999999f, 1.000000f, 1.000000f, -0.000001f, 0.000000f, 0.671988f, 0.986098f,
//        		0.999999f, -1.000001f, 1.000000f, 1.000000f, -0.000001f, 0.000000f, 0.343977f, 0.987104f,
//        		1.000000f, -0.248805f, -1.000000f, 1.000000f, -0.000001f, 0.000000f, 0.466171f, 0.658714f,
//        		0.999999f, -1.000001f, 1.000000f, -0.000000f, -1.000000f, 0.000000f, 0.011869f, 0.000000f,
//        		-1.000000f, -1.000000f, 1.000000f, -0.000000f, -1.000000f, 0.000000f, 0.335054f, 0.000804f,
//        		-1.000000f, -1.000000f, -1.000000f, -0.000000f, -1.000000f, 0.000000f, 0.343977f, 0.323867f,
//        		-1.000000f, -1.000000f, -1.000000f, 0.000000f, -0.000000f, -1.000000f, 1.000000f, 0.987104f,
//        		-1.000000f, 1.000000f, -1.000000f, -1.000000f, 0.000000f, -0.000000f, 0.343977f, 0.330124f,
//        		-1.000000f, 1.000000f, 1.000000f, 0.000000f, 1.000000f, 0.000000f, 0.671891f, 0.329117f,
//        		1.000000f, 0.999999f, 1.000000f, 0.000000f, 1.000000f, 0.000000f, 0.343977f, 0.328308f,
//        		-1.000000f, 1.000000f, -1.000000f, 0.000000f, 1.000000f, 0.000000f, 0.672897f, 0.001204f,
//        	};
        short indexes[]={
        		/* CUBE_001 77 faces */
        		0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 13, 15, 14, 16, 17, 18, 17, 19, 20, 21, 2, 22, 23, 24, 25, 24, 26, 27, 28, 5, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 36, 41, 42, 43, 44, 6, 45, 46, 47, 6, 47, 48, 7, 49, 50, 51, 52, 53, 54, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 2, 1, 63, 2, 65, 18, 66, 67, 68, 69, 70, 71, 72, 71, 73, 74, 75, 76, 77, 78, 6, 8, 49, 10, 9, 79, 10, 49, 11, 80, 9, 15, 81, 14, 82, 83, 84, 65, 16, 18, 18, 17, 20, 2, 64, 22, 24, 27, 25, 85, 86, 87, 88, 1, 0, 89, 90, 91, 92, 93, 94, 93, 92, 95, 96, 97, 38, 97, 36, 38, 98, 99, 100, 36, 40, 37, 6, 78, 45, 44, 46, 6, 6, 47, 7, 79, 49, 51, 49, 9, 50, 54, 53, 56, 101, 102, 103, 104, 105, 106, 96, 38, 107, 108, 109, 110, 111, 112, 113, 71, 74, 72, 0, 2, 21, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 117, 119, 136, 120, 122, 124, 137, 125, 127, 138, 128, 130, 139, 131, 140, 132, 134, 
        		};
        // Buffer for the truck  
//        ByteBuffer bb = ByteBuffer.allocateDirect(truckCoords.length * 4); 
//        bb.order(ByteOrder.nativeOrder());// use the device hardware's native byte order
//        truckVertexBuffer = bb.asFloatBuffer();  // create a floating point buffer from the ByteBuffer
//        truckVertexBuffer.put(truckCoords);    // add the coordinates to the FloatBuffer
//        truckVertexBuffer.position(0);            // set the buffer to read the first coordinate
//        // Buffer for the truck texture
//        bb = ByteBuffer.allocateDirect(truckTexCoords.length * 4); 
//        bb.order(ByteOrder.nativeOrder());// use the device hardware's native byte order
//        truckTextureBuffer = bb.asFloatBuffer();  // create a floating point buffer from the ByteBuffer
//        truckTextureBuffer.put(truckTexCoords);    // add the coordinates to the FloatBuffer
//        truckTextureBuffer.position(0);            // set the buffer to read the first coordinate

        ByteBuffer bb = ByteBuffer.allocateDirect(vertices.length * 4); 
        bb.order(ByteOrder.nativeOrder());// use the device hardware's native byte order
        truckVertexBuffer = bb.asFloatBuffer();  // create a floating point buffer from the ByteBuffer
        truckVertexBuffer.put(vertices);    // add the coordinates to the FloatBuffer
        truckVertexBuffer.position(0);            // set the buffer to read the first coordinate

        bb = ByteBuffer.allocateDirect(indexes.length * 2); 
        bb.order(ByteOrder.nativeOrder());// use the device hardware's native byte order
        truckIndexBuffer = bb.asShortBuffer();  // create a floating point buffer from the ByteBuffer
        truckIndexBuffer.put(indexes);    // add the coordinates to the FloatBuffer
        truckIndexBuffer.position(0);            // set the buffer to read the first coordinate

        bb = ByteBuffer.allocateDirect(trailerVertices.length * 4); 
        bb.order(ByteOrder.nativeOrder());// use the device hardware's native byte order
        trailerVertexBuffer = bb.asFloatBuffer();  // create a floating point buffer from the ByteBuffer
        trailerVertexBuffer.put(trailerVertices);    // add the coordinates to the FloatBuffer
        trailerVertexBuffer.position(0);            // set the buffer to read the first coordinate

        bb = ByteBuffer.allocateDirect(trailerIndexes.length * 2); 
        bb.order(ByteOrder.nativeOrder());// use the device hardware's native byte order
        trailerIndexBuffer = bb.asShortBuffer();  // create a floating point buffer from the ByteBuffer
        trailerIndexBuffer.put(trailerIndexes);    // add the coordinates to the FloatBuffer
        trailerIndexBuffer.position(0);            // set the buffer to read the first coordinate
        
        bb = ByteBuffer.allocateDirect(wheelVertices.length * 4); 
        bb.order(ByteOrder.nativeOrder());// use the device hardware's native byte order
        wheelVertexBuffer = bb.asFloatBuffer();  // create a floating point buffer from the ByteBuffer
        wheelVertexBuffer.put(wheelVertices);    // add the coordinates to the FloatBuffer
        wheelVertexBuffer.position(0);            // set the buffer to read the first coordinate

        bb = ByteBuffer.allocateDirect(wheelIndexes.length * 2); 
        bb.order(ByteOrder.nativeOrder());// use the device hardware's native byte order
        wheelIndexBuffer = bb.asShortBuffer();  // create a floating point buffer from the ByteBuffer
        wheelIndexBuffer.put(wheelIndexes);    // add the coordinates to the FloatBuffer
        wheelIndexBuffer.position(0);            // set the buffer to read the first coordinate
        
        bb = ByteBuffer.allocateDirect(dollyVertices.length * 4); 
        bb.order(ByteOrder.nativeOrder());// use the device hardware's native byte order
        dollyVertexBuffer = bb.asFloatBuffer();  // create a floating point buffer from the ByteBuffer
        dollyVertexBuffer.put(dollyVertices);    // add the coordinates to the FloatBuffer
        dollyVertexBuffer.position(0);            // set the buffer to read the first coordinate

        bb = ByteBuffer.allocateDirect(dollyIndexes.length * 2); 
        bb.order(ByteOrder.nativeOrder());// use the device hardware's native byte order
        dollyIndexBuffer = bb.asShortBuffer();  // create a floating point buffer from the ByteBuffer
        dollyIndexBuffer.put(dollyIndexes);    // add the coordinates to the FloatBuffer
        dollyIndexBuffer.position(0);            // set the buffer to read the first coordinate
        
       
        
//        // Buffer for the background  
//        bb = ByteBuffer.allocateDirect(backgroundCoords.length * 4); 
//        bb.order(ByteOrder.nativeOrder());// use the device hardware's native byte order
//        bgVertexBuffer = bb.asFloatBuffer();  // create a floating point buffer from the ByteBuffer
//        bgVertexBuffer.put(backgroundCoords);    // add the coordinates to the FloatBuffer
//        bgVertexBuffer.position(0);            // set the buffer to read the first coordinate
//
//        // Buffer for the background  
//        bb = ByteBuffer.allocateDirect(backgroundTexCoords.length * 4); 
//        bb.order(ByteOrder.nativeOrder());// use the device hardware's native byte order
//        bgTextureBuffer = bb.asFloatBuffer();  // create a floating point buffer from the ByteBuffer
//        bgTextureBuffer.put(backgroundTexCoords);    // add the coordinates to the FloatBuffer
//        bgTextureBuffer.position(0);            // set the buffer to read the first coordinate
        // Buffer for the background  
        bb = ByteBuffer.allocateDirect(bgVerticies.length * 4); 
        bb.order(ByteOrder.nativeOrder());// use the device hardware's native byte order
        bgVertexBuffer = bb.asFloatBuffer();  // create a floating point buffer from the ByteBuffer
        bgVertexBuffer.put(bgVerticies);    // add the coordinates to the FloatBuffer
        bgVertexBuffer.position(0);            // set the buffer to read the first coordinate

        // Buffer for the background  
        bb = ByteBuffer.allocateDirect(bgIndexes.length * 2); 
        bb.order(ByteOrder.nativeOrder());// use the device hardware's native byte order
        bgIndexBuffer = bb.asShortBuffer();  // create a floating point buffer from the ByteBuffer
        bgIndexBuffer.put(bgIndexes);    // add the coordinates to the FloatBuffer
        bgIndexBuffer.position(0);            // set the buffer to read the first coordinate

    }
	
    public void onSurfaceCreated(GL10 unused, EGLConfig config) {
    
        // Set the background frame color
        GLES20.glClearColor(0f, 0f, 0f, 1.0f);
        //checkGlError("glClearColor");
        initShapes();
        initPhysics();
        
        int vertexShader = loadShader(GLES20.GL_VERTEX_SHADER, vertexShaderCode);
        int fragmentShader = loadShader(GLES20.GL_FRAGMENT_SHADER, fragmentShaderCode);
        //checkGlError("loadShader");
        
        mProgram = GLES20.glCreateProgram();             // create empty OpenGL Program
        //checkGlError("glCreateProgram");
        GLES20.glAttachShader(mProgram, vertexShader);   // add the vertex shader to program
        //checkGlError("glAttachShader");
        GLES20.glAttachShader(mProgram, fragmentShader); // add the fragment shader to program
        //checkGlError("glAttachShader2");
        GLES20.glLinkProgram(mProgram);                  // creates OpenGL program executables
        //checkGlError("glLinkProgram");
        //int a = GLES20.glGetError();
        // get handle to the vertex shader's vPosition member
        muMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, "uMVPMatrix");
        muMVMatrixHandle = GLES20.glGetUniformLocation(mProgram, "uMVMatrix");
        maPositionHandle = GLES20.glGetAttribLocation(mProgram, "a_position");
        maNormalHandle = GLES20.glGetAttribLocation(mProgram, "a_normal");
        //checkGlError("glGetAttribLocation");
        //String test = GLES20.glGetShaderInfoLog(fragmentShader);
        //a = GLES20.glGetError();
        //String test2 = GLES20.glGetProgramInfoLog(mProgram);

        maTextureHandle = GLES20.glGetAttribLocation(mProgram, "a_texture");
        muMapsHandle = GLES20.glGetUniformLocation(mProgram, "u_maps");
        muTexIndHandle = GLES20.glGetUniformLocation(mProgram, "texInd");
        
        GLES20.glEnableVertexAttribArray(maPositionHandle);
        GLES20.glEnableVertexAttribArray(maNormalHandle);
        GLES20.glEnableVertexAttribArray(maTextureHandle);

        Matrix.setLookAtM(mVMatrix, 0, 0, -18f, -14f, 0f, 0f, 0f, 0f, 1.0f, 0.0f);
        
        bgTextureId = loadTexture(this.context,R.drawable.xy);
        truckTextureId = loadTexture(this.context,R.drawable.truck);
        trailerTextureId = loadTexture(this.context,R.drawable.trailer);
        dollyTextureId = loadTexture(this.context,R.drawable.dolly);
        arrowTextureId = loadTexture(this.context,R.drawable.arrow);
        steeringwheelTextureId = loadTexture(this.context,R.drawable.steeringwheel);
        testTextureId = loadTexture(this.context,R.drawable.test);
        
        GLES20.glEnable(GLES20.GL_BLEND);
        GLES20.glEnable(GLES20.GL_CULL_FACE);
        GLES20.glEnable(GLES20.GL_DEPTH_TEST);
        GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA, GLES20.GL_ONE_MINUS_SRC_ALPHA);

        
        
   }
    
    public void onDrawFrame(GL10 unused) {
    	// float factor;
        // Redraw background color
        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);

        // Add program to OpenGL environment
        GLES20.glUseProgram(mProgram);
        
        // Assign textures to their respective texture units
        GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, bgTextureId);
        GLES20.glActiveTexture(GLES20.GL_TEXTURE1);
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, truckTextureId);
        GLES20.glActiveTexture(GLES20.GL_TEXTURE2);
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, trailerTextureId);
        GLES20.glActiveTexture(GLES20.GL_TEXTURE3);
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, dollyTextureId);
        GLES20.glActiveTexture(GLES20.GL_TEXTURE4);
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, arrowTextureId);
        GLES20.glActiveTexture(GLES20.GL_TEXTURE5);
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, steeringwheelTextureId);
        GLES20.glActiveTexture(GLES20.GL_TEXTURE6);
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, testTextureId);
         
        // The {0,1} correspond to the activated textures units.
        int[] textureUnits = {0,1,2,3,4,5,6};//new int[2];
         
        // Sets the texture units to an uniform.
        GLES20.glUniform1iv(muMapsHandle, 7, textureUnits,0);
        
        
        
        
        
        // Prepare the triangle data
        GLES20.glVertexAttribPointer(maPositionHandle, 3, GLES20.GL_FLOAT, false, 32, truckVertexBuffer.position(0));
        GLES20.glVertexAttribPointer(maNormalHandle, 3, GLES20.GL_FLOAT, false, 32, truckVertexBuffer.position(3));
        GLES20.glVertexAttribPointer(maTextureHandle, 2, GLES20.GL_FLOAT, false, 32, truckVertexBuffer.position(6));

        
        
//        GLES20.glUniform1i(muTexIndHandle, 6);
//        
//        
//        Matrix.setIdentityM(mTMatrix, 0);
//        Matrix.setIdentityM(mMMatrix, 0);
//        Matrix.setIdentityM(mSMatrix, 0);
//        Matrix.setIdentityM(mRSMatrix, 0);
//        Matrix.setIdentityM(mTRSMatrix, 0);
//        Matrix.setIdentityM(mPTRSMatrix, 0);
//       
//        
//
//        Matrix.scaleM(mSMatrix, 0, (float)accel*100+0.3f, (float)accel*100+0.3f, (float)accel*100+0.3f);
//        Matrix.translateM(mTMatrix, 0, 0f, 0f, 0f);
//        Matrix.setRotateM(mMMatrix, 0, (float)wheelAngle*90.0f, 1, 1 , 0);
//        System.out.println("wheelAngle: " + wheelAngle );
////
//        Matrix.multiplyMM(mRSMatrix, 0, mMMatrix, 0, mSMatrix, 0);
//        Matrix.multiplyMM(mTRSMatrix, 0, mTMatrix, 0, mRSMatrix, 0);
//        Matrix.multiplyMM(mPTRSMatrix, 0, mVMatrix, 0, mTRSMatrix, 0);
//        Matrix.multiplyMM(mMVPTRSMatrix, 0, mProjMatrix, 0, mPTRSMatrix, 0);
//
//        GLES20.glUniformMatrix4fv(muMVPMatrixHandle, 1, false, mMVPTRSMatrix, 0);
//        GLES20.glUniformMatrix4fv(muMVMatrixHandle, 1, false, mPTRSMatrix, 0);
//        
//        // Draw the triangle
//        
//        GLES20.glDrawElements(GLES20.GL_TRIANGLES, truckIndexBuffer.capacity(), GLES10.GL_UNSIGNED_SHORT,truckIndexBuffer.position(0));
        
        
        
        
        
//        draw3DObject(6, truckVertexBuffer, truckIndexBuffer, 
//        		0.0f,-5.0f,0.f, 
//        		0.0f,5.0f,0.f, 
//    		(float)accel*100+0.3f, (float)accel*100+0.3f, (float)accel*100+0.3f,
//    		(float)wheelAngle*90.0f);

        draw3DObject(0, bgVertexBuffer, bgIndexBuffer, 
        		0.0f,0f,0.f, 
        		0.0f,0f,0.f, 
    		1, 1, 1,
    		0,180,0);
        
        
//        draw3DObject(6, dollyVertexBuffer, dollyIndexBuffer, 
//        		0.0f,0f,0.f, 
//        		0.0f,0f,-1.f, 
//    		1, 1, 1,
//    		0,180,(float)wheelAngle*90.0f);
//
//        draw3DObject(6, wheelVertexBuffer, wheelIndexBuffer, 
//        		-1f,0f,0f, 
//        		1f,0f,-1f, 
//    		1, 1, 1,
//    		90,180,(float)wheelAngle*90.0f-90);
        draw3DObject(6, wheelVertexBuffer, wheelIndexBuffer, 
        		1f,0f,0f, 
        		0f,0f,0f, 
    		1, 1, 1,
    		0,0,(float)wheelAngle*90.0f);


                
         
		if( dragVertex != null ) {
			lx = oldx-endVertex.position.x; 
			ly = oldy-endVertex.position.y;
			len = Math.sqrt(lx*lx+ly*ly);
			
			//System.out.println("direction: " + direction + ", speed: " + speed + ", len: " + len);
			
			if (len > 0.00001) {
				speed = (1 - filt)*speed + filt*accel;
				lx = lx/len*speed;
				ly = ly/len*speed;
				oldx = Math.max(-screenWidth/2,Math.min(screenWidth/2,(float) (oldx + Math.cos(wheelAngle)*lx - Math.sin(wheelAngle)*ly)));
				oldy = Math.max(-screenHeight/2,Math.min(screenHeight/2,(float) (oldy + Math.sin(wheelAngle)*lx + Math.cos(wheelAngle)*ly)));
				dragVertex.position.x = oldx;
				dragVertex.position.y = oldy;
			} else {
				dragVertex.position.x = oldx;
				dragVertex.position.y = oldy;
			}
		}			
		// Update
		world.update();
    }
    
    private void draw3DObject(int texInd, FloatBuffer vertexBuffer, ShortBuffer indexBuffer, 
    		float ptx, float pty, float ptz, 
    		float tx, float ty, float tz, 
    		float sx, float sy, float sz,
    		float rx, float ry, float rz) {
        GLES20.glVertexAttribPointer(maPositionHandle, 3, GLES20.GL_FLOAT, false, 32, vertexBuffer.position(0));
        GLES20.glVertexAttribPointer(maNormalHandle, 3, GLES20.GL_FLOAT, false, 32, vertexBuffer.position(3));
        GLES20.glVertexAttribPointer(maTextureHandle, 2, GLES20.GL_FLOAT, false, 32, vertexBuffer.position(6));

        
        
        GLES20.glUniform1i(muTexIndHandle, texInd);
        
        
        Matrix.setIdentityM(mTMatrix, 0);
        Matrix.setIdentityM(mRMatrix, 0);
        Matrix.setIdentityM(mSMatrix, 0);
        Matrix.setIdentityM(mRSMatrix, 0);
        Matrix.setIdentityM(mTRSMatrix, 0);
        Matrix.setIdentityM(mVTRSMatrix, 0);
       
        
        Matrix.scaleM(mSMatrix, 0, sx, sy, sz);
        Matrix.translateM(mTMatrix, 0, ptx, pty, ptz);
        //Matrix.setRotateM(mRMatrix, 0, 180.0f, 0, 1 , 0);
        System.out.println("wheelAngle: " + rz );
//
        Matrix.multiplyMM(mTempMatrix1, 0, mSMatrix, 0, mTMatrix, 0);
        
        Matrix.setRotateM(mRMatrix, 0, ry, 0, 1 , 0);
        Matrix.multiplyMM(mTempMatrix2, 0, mRMatrix, 0, mTempMatrix1, 0);

        Matrix.setRotateM(mRMatrix, 0, rx, 1, 0 , 0);
        Matrix.multiplyMM(mTempMatrix1, 0, mRMatrix, 0, mTempMatrix2, 0);
        
        Matrix.setRotateM(mRMatrix, 0, rz, 0, 0 , 1);
        Matrix.multiplyMM(mTempMatrix2, 0, mRMatrix, 0, mTempMatrix1, 0);

        Matrix.setIdentityM(mTMatrix, 0);
        Matrix.translateM(mTMatrix, 0, tx, ty, tz);
        Matrix.multiplyMM(mTempMatrix1, 0, mTMatrix, 0, mTempMatrix2, 0);
        Matrix.multiplyMM(mVTRSMatrix, 0, mVMatrix, 0, mTempMatrix1, 0);
        Matrix.multiplyMM(mMVPTRSMatrix, 0, mProjMatrix, 0, mVTRSMatrix, 0);

        GLES20.glUniformMatrix4fv(muMVPMatrixHandle, 1, false, mMVPTRSMatrix, 0);
        GLES20.glUniformMatrix4fv(muMVMatrixHandle, 1, false, mVTRSMatrix, 0);
        
        // Draw the triangle
        
        GLES20.glDrawElements(GLES20.GL_TRIANGLES, indexBuffer.capacity(), GLES10.GL_UNSIGNED_SHORT,indexBuffer.position(0));

    }
    
    public void onSurfaceChanged(GL10 unused, int width, int height) {
        GLES20.glViewport(0, 0, width, height);
        
        screenAspectRatio = (float) width / height;
        
        // this projection matrix is applied to object coodinates
        // in the onDrawFrame() method
        if (screenAspectRatio<1) {
        	screenHeight=2;
		    screenWidth = screenAspectRatio*2;
		    Matrix.frustumM(mProjMatrix, 0, -screenAspectRatio, screenAspectRatio, -1, 1, 2f, 40);
        } else {
        	Matrix.frustumM(mProjMatrix, 0, -1, 1, -1/screenAspectRatio, 1/screenAspectRatio, 2f, 40);
        	screenHeight=2;
		    screenWidth = screenAspectRatio*2;
        }
        if (world != null) {
        	world.screenWidth = screenWidth;
        	world.screenHeight = screenHeight;
        }
    }
	private void initPhysics() {
		// Create a new physics instance with gravity pointing downwards and using 10 iterations
		world = new Physics(screenWidth, screenHeight, 0.0f, 0.0f, 15 );
		
			PhysicsBody Body = new PhysicsBody(world, 1); //Create a few triangles. Only boxes would get boring, right?

			trailer_len = 0.35f;
			trailer_width = 0.1f;
			truck_len = 0.35f;
			truck_width = 0.1f;
			dolly_len = 0.1f;
			dolly_width = 0.1f;
		
			trailerEndVertex = new Vertex( world, Body, 0.675f, -0.105f);
			trailerStartVertex = new Vertex( world, Body, 0.44f , -0.366f );
			endVertex = new Vertex( world, Body, 0.37f , -0.436f );
			dragVertex = new Vertex( world, Body, 0.06f , -0.6f);
			oldx = 0.06f;
			oldy = -0.6f;
			
			trailer_len = (float)Math.sqrt(Math.pow((trailerEndVertex.position.x-trailerStartVertex.position.x), 2) + Math.pow((trailerEndVertex.position.y-trailerStartVertex.position.y), 2)) ;
			trailer_width = 0.1f;
			truck_len =  (float)Math.sqrt(Math.pow((endVertex.position.x-dragVertex.position.x), 2) + Math.pow((endVertex.position.y-dragVertex.position.y), 2)) ;
			truck_width = 0.1f;
			dolly_len =(float)Math.sqrt(Math.pow((endVertex.position.x-trailerStartVertex.position.x), 2) + Math.pow((endVertex.position.y-trailerStartVertex.position.y), 2)) ;
			dolly_width = 0.1f;
			

		
			new Edge( world, Body, trailerEndVertex, trailerStartVertex );
			new Edge( world, Body, trailerStartVertex, endVertex );
			new Edge( world, Body, endVertex, dragVertex );
			Body.addConstraints();
			turn=0;
			direction=0;
			speed=0;
			wheelAngle=0;
//		}
	}
	// Get a new texture id:
	private static int newTextureID() {
	    int[] temp = new int[1];
	    GLES20.glGenTextures(1, temp, 0);
	    return temp[0];        
	}

	// Will load a texture out of a drawable resource file, and return an OpenGL texture ID:
	private int loadTexture(Context context, int resource) {
	    
	    // In which ID will we be storing this texture?
	    int id = newTextureID();
	    
	    // We need to flip the textures vertically:
	    android.graphics.Matrix flip = new android.graphics.Matrix();
	    flip.postScale(1f, -1f);
	    
	    // This will tell the BitmapFactory to not scale based on the device's pixel density:
	    // (Thanks to Matthew Marshall for this bit)
	    BitmapFactory.Options opts = new BitmapFactory.Options();
	    opts.inScaled = false;
	    
	    // Load up, and flip the texture:
	    Bitmap temp = BitmapFactory.decodeResource(context.getResources(), resource, opts);
	    Bitmap bmp = Bitmap.createBitmap(temp, 0, 0, temp.getWidth(), temp.getHeight(), flip, true);
	    temp.recycle();
	    
	    GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, id);
	    
	    // Set all of our texture parameters:
	    GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR_MIPMAP_NEAREST);
	    GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR_MIPMAP_NEAREST);
	    GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_REPEAT);
	    GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_REPEAT);
	    
	    // Generate, and load up all of the mipmaps:
	    for(int level=0, height = bmp.getHeight(), width = bmp.getWidth(); true; level++) {
	        // Push the bitmap onto the GPU:
	        GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, level, bmp, 0);
	        
	        // We need to stop when the texture is 1x1:
	        if(height==1 && width==1) break;
	        
	        // Resize, and let's go again:
	        width >>= 1; height >>= 1;
	        if(width<1)  width = 1;
	        if(height<1) height = 1;
	        
	        Bitmap bmp2 = Bitmap.createScaledBitmap(bmp, width, height, true);
	        bmp.recycle();
	        bmp = bmp2;
	    }
	    
	    bmp.recycle();
	    
	    return id;
	}
    private void checkGlError(String op) {
        int error;
        while ((error = GLES20.glGetError()) != GLES20.GL_NO_ERROR) {
            Log.e(TAG, op + ": glError " + error);
            //throw new RuntimeException(op + ": glError " + error);
        }
    }
 
}